//
// Created by Dawn on 2018/4/22.
//
#include <iomanip>
#include <iostream>
#include <vector>
#include <random>

using namespace std;
void random(int a[], int len)
{
    default_random_engine e;
    uniform_int_distribution<signed> u(-100, 100);
    for(int i =0; i< len; i++)
    {
        int temp = u(e);
        a[i] = temp;
    }
}

void print(int a[], int len)
{
    for(int i=0; i<len; i++)
    {
        std::cout << std::setw(5) << a[i];
    }
    std::cout<< std::endl;
}

void printVector(vector<int> a, int len)
{
    for(int i=0; i<len; i++)
    {
        std::cout << std::setw(5) << a[i];
    }
    std::cout<< std::endl;
}

void swap(int a[], int i, int j)
{
    int t = a[i];
    a[i] = a[j];
    a[j] = t;
}

vector<int> generateRandomArray(vector<int> a, int len, int value)
{
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> dis(0, value);

    for (int n=0; n<len; ++n)
        //Use dis to transform the random unsigned int generated by gen into an int in [1, 6]
        a.push_back(dis(gen));
    return a;
}


vector<int> bubble_sort(vector<int> a, int len)
{
    if(len == 0 || len < 2)
        return a;
    for(int length=len; length>=0; length--)
    {
        for(int i=0; i<length-1; i++)
        {
            if(a[i] > a[i+1])
            {
                int t;
                t = a[i];
                a[i] = a[i+1];
                a[i+1] = t;
            }
        }
    }
    return a;
}

bool compare(vector<int> A, vector<int> B)
{
    bool isTrue = true;

    for(int i=0, j=0; i<A.size() && j<B.size() ;i++, j++)
    {
        if(A[i] != B[j])
        {
            isTrue = false;
            break;
        }

    }

    if(isTrue == false){
        cout << "compare error:"<<endl;
        cout << "A: "<< endl;
        printVector(A, A.size());
        cout << "B: "<< endl;
        printVector(B, B.size());
    }
    else
    {
        cout <<"success"<<endl;
    }
    printVector(A, A.size());
    return isTrue;

}

